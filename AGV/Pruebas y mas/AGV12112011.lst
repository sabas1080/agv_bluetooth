CCS PCH C Compiler, Version 4.108, 26124               13-Nov-11 15:24

               Filename: F:\AGV\Programa\AGV12112011.lst

               ROM used: 332 bytes (1%)
                         Largest free fragment is 32436
               RAM used: 11 (1%) at main() level
                         12 (1%) worst case
               Stack:    1 locations

*
0000:  GOTO   00D4
.................... //*************************************************************************************************** 
.................... //---------------------Programa de un AGV Electronica y Mecanica---------------- 
.................... //-------------------------31 de Octubre del 2011------------------------------ 
.................... //---------------Programacion: Andres Eduardo Sabas Jimenez-------------------- 
.................... //-----------------Diseño:                                           ------------ 
.................... //-----------------------Objetivo: Lograr un vehiculo no tripulado--------------  
.................... //-----------------con opcion hibrida automatica y manual, con comunicacion bluethoot----------- 
.................... //----------------------asi como poder soportar una pantalla touch-------------- 
.................... //**************************************************************************************************** 
.................... //#include <AGV.h> 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HS                       //High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES BORV20                   //Brownout reset at 2.0V 
.................... #FUSES PUT                      //Power Up Timer 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES STVREN                   //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES NOWRTD                   //Data EEPROM not write protected 
.................... #FUSES IESO                     //Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                    //Fail-safe clock monitor enabled 
.................... #FUSES PBADEN                   //PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                   //configuration not registers write protected 
.................... #FUSES NOWRTB                   //Boot block not write protected 
.................... #FUSES NOEBTR                   //Memory not protected from table reads 
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads 
.................... #FUSES NOCPB                    //No Boot Block code protection 
.................... #FUSES MCLR                     //Master Clear pin enabled 
.................... #FUSES LPT1OSC                  //Timer1 configured for low-power operation 
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES PLL12                    //Divide By 12(48MHz oscillator input) 
.................... #FUSES CPUDIV4                  //System Clock by 4 
.................... #FUSES USBDIV                   //USB clock source comes from PLL divide by 2 
.................... #FUSES VREGEN                   //USB voltage regulator enabled 
.................... #FUSES ICPRT                    //ICPRT enabled 
....................  
.................... #use delay(crystal=20000000,  clock=3000000) 
*
00B8:  CLRF   FEA
00BA:  MOVLW  0B
00BC:  MOVWF  FE9
00BE:  MOVF   FEF,W
00C0:  BZ    00D0
00C2:  MOVLW  F8
00C4:  MOVWF  00
00C6:  DECFSZ 00,F
00C8:  BRA    00C6
00CA:  BRA    00CC
00CC:  DECFSZ FEF,F
00CE:  BRA    00C2
00D0:  GOTO   0142 (RETURN)
....................  
....................  
.................... //---------- Configuro el uso del puerto serial------- 
.................... #use rs232(baud=19200, xmit=PIN_C6,rcv=PIN_C7,RESTART_WDT) 
....................  
.................... //--------------Configuro el uso de I2C------------------ 
....................  
.................... #use i2c(Master,sda=PIN_D0,scl=PIN_D1,Slow,force_hw) 
*
0070:  MOVLW  08
0072:  MOVWF  01
0074:  NOP   
0076:  BCF    F8C.1
0078:  BCF    F95.1
007A:  NOP   
007C:  RLCF   0A,F
007E:  BCF    F8C.0
0080:  BTFSC  FD8.0
0082:  BSF    F95.0
0084:  BTFSS  FD8.0
0086:  BCF    F95.0
0088:  BSF    F95.1
008A:  BTFSS  F83.1
008C:  BRA    008A
008E:  DECFSZ 01,F
0090:  BRA    0074
0092:  NOP   
0094:  BCF    F8C.1
0096:  BCF    F95.1
0098:  NOP   
009A:  BSF    F95.0
009C:  NOP   
009E:  NOP   
00A0:  BSF    F95.1
00A2:  BTFSS  F83.1
00A4:  BRA    00A2
00A6:  CLRF   01
00A8:  NOP   
00AA:  BTFSC  F83.0
00AC:  BSF    01.0
00AE:  BCF    F8C.1
00B0:  BCF    F95.1
00B2:  BCF    F8C.0
00B4:  BCF    F95.0
00B6:  RETLW  00
....................  
.................... //-----------------Se le pide a picc que no mueva los TRIS de los puertos 
.................... #use FAST_IO(A) 
.................... #use FAST_IO(B) 
.................... #use FAST_IO(C) 
.................... #use FAST_IO(D) 
.................... #use FAST_IO(E) 
....................  
.................... //----------------Seccionde definicion de bits utlizados------------------------ 
.................... #bit LED=0xF82.0   //Direccion logica del led    
....................  
.................... //------------------------ Variables globales----------------------------------- 
....................    long VAL_ADC; 
....................    unsigned char cmd, blue; 
....................    int a, com; 
....................     
.................... //****************************************************************************** 
.................... //------------------------- Interrupciones-------------------------------------- 
.................... //****************************************************************************** 
.................... //------------------------Subrutina de encoder--------------------------------- 
.................... /*#int_EXT 
.................... void  EXT_isr(void)  
.................... { 
....................    a++; 
.................... } 
.................... //---------------------Interrupciondel rs232----------------------------------- 
.................... #int_RDA 
.................... void  RDA_isr(void)  
.................... { 
....................  if(com=0) 
....................    { 
....................    cmd=getc(); //Espera de instruccion manual o automatico 
....................    } 
....................   else 
....................   { 
....................    blue=getc(); //Comunicacion con el bluetooht 
....................   } 
....................   
.................... }*/ 
.................... //****************************************************************************** 
....................  
.................... //-----------------Subrutina que enciende y me apaga un led--------------------- 
.................... void FLASHEO(unsigned char TIE) 
.................... { 
....................    LED=1; 
....................    delay_ms(TIE); 
....................    LED=0; 
....................    delay_ms(TIE); 
....................    LED=1; 
....................    delay_ms(TIE); 
....................    LED=0; 
....................    delay_ms(TIE); 
....................   
....................    return; 
....................  
.................... } 
.................... //******************SUBRUTINAS DEL GIRO DEL MOTOR******************************** 
.................... //----------Subrutina de Giro a la derecha--------- 
.................... void DERECHA(void) 
.................... { 
....................       set_pwm1_duty(76); 
....................       set_pwm2_duty(38); 
.................... } 
....................  
.................... //----------Subrutina de Giro a la Izquierda--------- 
.................... void IZQUIERDA(void) 
.................... { 
....................       set_pwm1_duty(76); 
....................       set_pwm2_duty(38); 
.................... } 
.................... //***********************SUBRUTINAS DEL BRAZO********************************** 
.................... //----------Subrutina de cierre de pinza--------- 
.................... void CIERRE(void) 
.................... { 
....................  
.................... } 
.................... //----------Subrutina de levantamiento de la pinza--------- 
.................... void ALTURA(void) 
.................... { 
....................  
.................... } 
....................  
.................... //********************SUBRUTINAS MAESTRAS************************************** 
.................... //***************************************************************************** 
.................... //------------------Subrutina de modo manual 
.................... void manual() 
.................... { 
....................    com=1; //Se a seleccionado el modo y ahora se enviaran comandos del bluethoot 
....................     
.................... } 
.................... //-----------------Subrutina de modo automatico 
.................... void automatico() 
.................... { 
....................    /*com=1; //Se a seleccionado el modo y ahora se enviaran comandos del bluethoot 
....................    while(1) 
....................       { 
....................         if(input(pin_A0)==1 && input(pin_A1)==1) 
....................         { 
....................          ADELANTE(); 
....................         } 
....................         if(input(pin_A0)==1 && input(pin_A1)==0) 
....................         { 
....................          DERECHA(); 
....................         } 
....................         if(input(pin_A0)==0 && input(pin_A1)==1) 
....................         { 
....................          IZQUIERDA(); 
....................         } 
....................         if(input(pin_A0)==0 && input(pin_A1)==0) 
....................         { 
....................         SALIDA(); 
....................         } 
....................  
....................       }*/ 
.................... } 
.................... //---  Subrutina de configuracion---------- 
.................... void INI_CPU(void) 
.................... { 
....................  
....................    setup_adc_ports(NO_ANALOGS|VSS_VDD); 
*
0004:  MOVF   FC1,W
0006:  ANDLW  C0
0008:  IORLW  0F
000A:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_2); 
000C:  BCF    FC0.0
000E:  BCF    FC0.1
0010:  BCF    FC0.2
0012:  BCF    FC0.7
0014:  BSF    FC2.0
....................    setup_psp(PSP_DISABLED); 
0016:  BCF    F96.4
....................    setup_spi(SPI_SS_DISABLED); 
0018:  BCF    FC6.5
001A:  MOVLW  01
001C:  MOVWF  FC6
001E:  MOVLW  00
0020:  MOVWF  FC7
....................    setup_wdt(WDT_OFF); 
0022:  BCF    FD1.0
....................    setup_timer_0(RTCC_INTERNAL); 
0024:  MOVLW  80
0026:  MOVWF  FD5
....................    setup_timer_1(T1_DISABLED); 
0028:  CLRF   FCD
....................    setup_timer_2(T2_DIV_BY_16,77,1); 
002A:  MOVLW  00
002C:  IORLW  06
002E:  MOVWF  FCA
0030:  MOVLW  4D
0032:  MOVWF  FCB
....................    //setup_ccp1(CCP_PWM_FULL_BRIDGE|CCP_SHUTDOWN_AC_L|CCP_SHUTDOWN_BD_L); 
....................    setup_ccp1(CCP_PWM); 
0034:  BCF    F8B.2
0036:  MOVLW  0C
0038:  MOVWF  FBD
003A:  CLRF   FB7
003C:  CLRF   FB6
....................    setup_ccp2(CCP_PWM); 
003E:  BCF    F8B.1
0040:  MOVWF  FBA
....................    set_pwm1_duty(0);// Motor derecho 
0042:  CLRF   FBE
....................    set_pwm2_duty(0);// Motor Izquierdo 
0044:  CLRF   FBB
....................    setup_comparator(NC_NC_NC_NC); 
0046:  MOVLW  07
0048:  MOVWF  FB4
004A:  MOVF   F92,W
004C:  MOVWF  F92
004E:  MOVLW  02
0050:  MOVWF  00
0052:  DECFSZ 00,F
0054:  BRA    0052
0056:  MOVF   FB4,W
0058:  BCF    FA1.6
....................     
....................    //0x00 Salida 
....................    //0xFF Entrada 
....................    set_tris_A(0xFF);  
005A:  MOVLW  FF
005C:  MOVWF  F92
....................    SET_TRIS_B(0XFF);  
005E:  MOVWF  F93
....................    SET_TRIS_C(0X00);//CCP1 y 2 Salida 
0060:  MOVLW  00
0062:  MOVWF  F94
....................    //SET_TRIS_D(0XFF); 
....................    SET_TRIS_E(0xFF);  
0064:  MOVLW  FF
0066:  MOVWF  F96
....................    output_float(PIN_D0);         //I2C pin float  
0068:  BSF    F95.0
....................    output_float(PIN_D1);         //I2C pin float  
006A:  BSF    F95.1
....................     
....................    return; 
....................  
.................... } 
006C:  GOTO   00FC (RETURN)
....................  
.................... //-------------Programa Principal------------------------ 
.................... void main() 
.................... { 
*
00D4:  CLRF   FF8
00D6:  BCF    FD0.7
00D8:  CLRF   FEA
00DA:  CLRF   FE9
00DC:  BSF    FB8.3
00DE:  MOVLW  26
00E0:  MOVWF  FAF
00E2:  MOVLW  00
00E4:  MOVWF  FB0
00E6:  MOVLW  A6
00E8:  MOVWF  FAC
00EA:  MOVLW  90
00EC:  MOVWF  FAB
00EE:  MOVF   FC1,W
00F0:  ANDLW  C0
00F2:  IORLW  0F
00F4:  MOVWF  FC1
00F6:  MOVLW  07
00F8:  MOVWF  FB4
....................  
....................        
....................       INI_CPU(); 
00FA:  BRA    0004
....................       //FLASHEO(100); 
....................          
....................                
....................  
....................        
....................       while(a<100) 
....................       { 
00FC:  MOVF   08,W
00FE:  SUBLW  63
0100:  BNC   014A
....................                output_low(PIN_D2); 
0102:  BCF    F8C.2
....................                i2c_start();      //condicion de inicio 
0104:  BSF    F95.0
0106:  NOP   
0108:  BSF    F95.1
010A:  NOP   
010C:  BCF    F8C.0
010E:  BCF    F95.0
0110:  NOP   
0112:  BCF    F8C.1
0114:  BCF    F95.1
....................                i2c_write(0x08);  //direccion del esclavo con el que haremos la comunicacion 
0116:  MOVLW  08
0118:  MOVWF  0A
011A:  RCALL  0070
....................  
....................                i2c_write(a);  //enviamos un dato, p.e el entero 5 
011C:  MOVFF  08,0A
0120:  RCALL  0070
....................                i2c_stop();    //finalizacion de la comunicacion 
0122:  BCF    F95.0
0124:  NOP   
0126:  BSF    F95.1
0128:  BTFSS  F83.1
012A:  BRA    0128
012C:  NOP   
012E:  BRA    0130
0130:  NOP   
0132:  BSF    F95.0
0134:  NOP   
....................                output_high(PIN_D2); 
0136:  BSF    F8C.2
....................                delay_ms(1000);   //introducimos retardo para que no este constantemte escribiendo 
0138:  MOVLW  04
013A:  MOVWF  0A
013C:  MOVLW  FA
013E:  MOVWF  0B
0140:  BRA    00B8
0142:  DECFSZ 0A,F
0144:  BRA    013C
....................             a++; 
0146:  INCF   08,F
....................          /*//Eleccion del modo de trabajo 
....................          if(cmd!=0) 
....................          { 
....................             switch (cmd) { 
....................  
....................             case 0:printf("Manual"); 
....................             manual(); 
....................  
....................             break; 
....................  
....................             case 1:printf("Automatico"); 
....................             automatico(); 
....................  
....................            break; 
....................  
....................            default:printf("Bad cmd"); 
....................  
....................            break; } 
....................       } 
....................       else 
....................       { 
....................        
....................       }*/ 
....................  
....................       } 
0148:  BRA    00FC
....................        
.................... } 
014A:  SLEEP 

Configuration Fuses:
   Word  1: CC3C   IESO FCMEN HS PLL5 CPUDIV4 USBDIV
   Word  2: 0E38   NOBROWNOUT WDT128 NOWDT BORV20 PUT VREGEN
   Word  3: 8700   PBADEN CCP2C1 MCLR LPT1OSC
   Word  4: 00A1   STVREN NODEBUG NOLVP NOXINST ICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
