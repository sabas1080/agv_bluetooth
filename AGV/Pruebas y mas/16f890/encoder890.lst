CCS PCM C Compiler, Version 4.108, 26124               14-nov-11 23:20

               Filename: M:\AGV\Programa\16f890\encoder890.lst

               ROM used: 1437 words (18%)
                         Largest free fragment is 2048
               RAM used: 19 (5%) at main() level
                         44 (12%) worst case
               Stack:    6 locations

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   45B
0003:  NOP
.................... #include <encoder890.h> 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES XT                    	//Crystal osc <= 4mhz for PCM/PCH , 3mhz to 10 mhz for PCD 
.................... #FUSES PUT                   	//Power Up Timer 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES NODEBUG               	//No Debug mode for ICD 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #FUSES NOWRT                 	//Program memory not write protected 
....................  
.................... #use delay(clock=4000000) 
*
0048:  MOVLW  3B
0049:  MOVWF  04
004A:  BCF    03.7
004B:  MOVF   00,W
004C:  BTFSC  03.2
004D:  GOTO   05C
004E:  MOVLW  01
004F:  MOVWF  78
0050:  CLRF   77
0051:  DECFSZ 77,F
0052:  GOTO   051
0053:  DECFSZ 78,F
0054:  GOTO   050
0055:  MOVLW  4A
0056:  MOVWF  77
0057:  DECFSZ 77,F
0058:  GOTO   057
0059:  GOTO   05A
005A:  DECFSZ 00,F
005B:  GOTO   04E
005C:  RETURN
....................  
....................  
....................  
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
.................... #use i2c(Slave,Fast,sda=PIN_C4,scl=PIN_C3,force_hw,address=0x08) 
....................  
.................... #include <LCD.C> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    BOOLEAN enable;           // on to an I/O port to gain 
....................    BOOLEAN rs;               // access to the LCD pins. 
....................    BOOLEAN rw;               // The bits are allocated from 
....................    BOOLEAN unused;           // low order up.  ENABLE will 
....................    int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... BYTE lcd_read_nibble(void); 
....................  
.................... BYTE lcd_read_byte(void) 
.................... { 
....................    BYTE low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0075:  MOVLW  0F
0076:  BSF    03.5
0077:  ANDWF  08,W
0078:  IORLW  F0
0079:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
007A:  BCF    03.5
007B:  BSF    08.2
....................    delay_cycles(1); 
007C:  NOP
....................    lcd_output_enable(1); 
007D:  BSF    08.0
....................    delay_cycles(1); 
007E:  NOP
....................    high = lcd_read_nibble(); 
007F:  CALL   069
0080:  MOVF   78,W
0081:  MOVWF  42
....................        
....................    lcd_output_enable(0); 
0082:  BCF    08.0
....................    delay_cycles(1); 
0083:  NOP
....................    lcd_output_enable(1); 
0084:  BSF    08.0
....................    delay_us(1); 
0085:  NOP
....................    low = lcd_read_nibble(); 
0086:  CALL   069
0087:  MOVF   78,W
0088:  MOVWF  41
....................        
....................    lcd_output_enable(0); 
0089:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
008A:  MOVLW  0F
008B:  BSF    03.5
008C:  ANDWF  08,W
008D:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
008E:  BCF    03.5
008F:  SWAPF  42,W
0090:  MOVWF  77
0091:  MOVLW  F0
0092:  ANDWF  77,F
0093:  MOVF   77,W
0094:  IORWF  41,W
0095:  MOVWF  78
.................... } 
....................  
.................... BYTE lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    BYTE n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0069:  MOVF   08,W
006A:  MOVWF  77
006B:  SWAPF  08,W
006C:  ANDLW  0F
006D:  MOVWF  78
....................   #endif 
.................... } 
006E:  RETURN
....................  
.................... void lcd_send_nibble(BYTE n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
005D:  SWAPF  42,W
005E:  ANDLW  F0
005F:  MOVWF  77
0060:  MOVLW  0F
0061:  ANDWF  08,W
0062:  IORWF  77,W
0063:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0064:  NOP
....................    lcd_output_enable(1); 
0065:  BSF    08.0
....................    delay_us(2); 
0066:  GOTO   067
....................    lcd_output_enable(0); 
0067:  BCF    08.0
.................... } 
0068:  RETURN
....................  
.................... void lcd_send_byte(BYTE address, BYTE n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
006F:  BSF    03.5
0070:  BCF    08.0
....................    lcd_rs_tris(); 
0071:  BCF    08.1
....................    lcd_rw_tris(); 
0072:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0073:  BCF    03.5
0074:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0096:  MOVF   78,W
0097:  MOVWF  41
0098:  BTFSC  41.7
0099:  GOTO   075
....................    lcd_output_rs(address); 
009A:  BTFSS  3F.0
009B:  BCF    08.1
009C:  BTFSC  3F.0
009D:  BSF    08.1
....................    delay_cycles(1); 
009E:  NOP
....................    lcd_output_rw(0); 
009F:  BCF    08.2
....................    delay_cycles(1); 
00A0:  NOP
....................    lcd_output_enable(0); 
00A1:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
00A2:  SWAPF  40,W
00A3:  MOVWF  41
00A4:  MOVLW  0F
00A5:  ANDWF  41,F
00A6:  MOVF   41,W
00A7:  MOVWF  42
00A8:  CALL   05D
....................    lcd_send_nibble(n & 0xf); 
00A9:  MOVF   40,W
00AA:  ANDLW  0F
00AB:  MOVWF  41
00AC:  MOVWF  42
00AD:  CALL   05D
.................... } 
00AE:  RETURN
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    BYTE i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00AF:  MOVLW  0F
00B0:  BSF    03.5
00B1:  ANDWF  08,W
00B2:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
00B3:  BCF    08.0
....................    lcd_rs_tris(); 
00B4:  BCF    08.1
....................    lcd_rw_tris(); 
00B5:  BCF    08.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
00B6:  BCF    03.5
00B7:  BCF    08.1
....................    lcd_output_rw(0); 
00B8:  BCF    08.2
....................    lcd_output_enable(0); 
00B9:  BCF    08.0
....................      
....................    delay_ms(15); 
00BA:  MOVLW  0F
00BB:  MOVWF  3B
00BC:  CALL   048
....................    for(i=1;i<=3;++i) 
00BD:  MOVLW  01
00BE:  MOVWF  2D
00BF:  MOVF   2D,W
00C0:  SUBLW  03
00C1:  BTFSS  03.0
00C2:  GOTO   0CB
....................    { 
....................        lcd_send_nibble(3); 
00C3:  MOVLW  03
00C4:  MOVWF  42
00C5:  CALL   05D
....................        delay_ms(5); 
00C6:  MOVLW  05
00C7:  MOVWF  3B
00C8:  CALL   048
....................    } 
00C9:  INCF   2D,F
00CA:  GOTO   0BF
....................     
....................    lcd_send_nibble(2); 
00CB:  MOVLW  02
00CC:  MOVWF  42
00CD:  CALL   05D
....................    for(i=0;i<=3;++i) 
00CE:  CLRF   2D
00CF:  MOVF   2D,W
00D0:  SUBLW  03
00D1:  BTFSS  03.0
00D2:  GOTO   0DC
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00D3:  MOVF   2D,W
00D4:  CALL   004
00D5:  MOVWF  2E
00D6:  CLRF   3F
00D7:  MOVF   2E,W
00D8:  MOVWF  40
00D9:  CALL   06F
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00DA:  INCF   2D,F
00DB:  GOTO   0CF
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
00DC:  BCF    0A.3
00DD:  BCF    0A.4
00DE:  GOTO   4C2 (RETURN)
....................  
.................... void lcd_gotoxy(BYTE x, BYTE y) 
.................... { 
....................    BYTE address; 
....................     
....................    if(y!=1) 
00DF:  DECFSZ 3C,W
00E0:  GOTO   0E2
00E1:  GOTO   0E5
....................       address=LCD_LINE_TWO; 
00E2:  MOVLW  40
00E3:  MOVWF  3D
....................    else 
00E4:  GOTO   0E6
....................       address=0; 
00E5:  CLRF   3D
....................       
....................    address+=x-1; 
00E6:  MOVLW  01
00E7:  SUBWF  3B,W
00E8:  ADDWF  3D,F
....................    lcd_send_byte(0,0x80|address); 
00E9:  MOVF   3D,W
00EA:  IORLW  80
00EB:  MOVWF  3E
00EC:  CLRF   3F
00ED:  MOVF   3E,W
00EE:  MOVWF  40
00EF:  CALL   06F
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
00F0:  RETURN
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
00F1:  MOVF   3A,W
00F2:  XORLW  07
00F3:  BTFSC  03.2
00F4:  GOTO   0FF
00F5:  XORLW  0B
00F6:  BTFSC  03.2
00F7:  GOTO   104
00F8:  XORLW  06
00F9:  BTFSC  03.2
00FA:  GOTO   10C
00FB:  XORLW  02
00FC:  BTFSC  03.2
00FD:  GOTO   112
00FE:  GOTO   117
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00FF:  MOVLW  01
0100:  MOVWF  3B
0101:  MOVWF  3C
0102:  CALL   0DF
0103:  GOTO   11D
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0104:  CLRF   3F
0105:  MOVLW  01
0106:  MOVWF  40
0107:  CALL   06F
....................                      delay_ms(2); 
0108:  MOVLW  02
0109:  MOVWF  3B
010A:  CALL   048
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
010B:  GOTO   11D
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
010C:  MOVLW  01
010D:  MOVWF  3B
010E:  MOVLW  02
010F:  MOVWF  3C
0110:  CALL   0DF
0111:  GOTO   11D
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0112:  CLRF   3F
0113:  MOVLW  10
0114:  MOVWF  40
0115:  CALL   06F
0116:  GOTO   11D
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0117:  MOVLW  01
0118:  MOVWF  3F
0119:  MOVF   3A,W
011A:  MOVWF  40
011B:  CALL   06F
011C:  GOTO   11D
....................      #endif 
....................    } 
.................... } 
011D:  RETURN
....................   
.................... char lcd_getc(BYTE x, BYTE y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
....................  
....................  
.................... int8 direccion=0,checksum=0,checksumrec=0; 
.................... float valor2; 
.................... int8 valor,dato; 
.................... int contador1; 
.................... int16 contador2; 
....................  
.................... void muestra_datos(void) 
....................    { 
*
001F:  DATA 00,00
....................    lcd_gotoxy(1,1); 
*
03F2:  MOVLW  01
03F3:  MOVWF  3B
03F4:  MOVWF  3C
03F5:  CALL   0DF
....................    lcd_putc('\f'); 
03F6:  MOVLW  0C
03F7:  MOVWF  3A
03F8:  CALL   0F1
....................    lcd_gotoxy(1,1); 
03F9:  MOVLW  01
03FA:  MOVWF  3B
03FB:  MOVWF  3C
03FC:  CALL   0DF
....................    lcd_putc("Showing data"); 
03FD:  MOVLW  0C
03FE:  BSF    03.6
03FF:  MOVWF  0D
0400:  MOVLW  00
0401:  MOVWF  0F
0402:  BCF    03.6
0403:  CALL   11E
....................  
....................      
....................     for(contador2=1;contador2<65535;contador2++) 
0404:  CLRF   2C
0405:  MOVLW  01
0406:  MOVWF  2B
0407:  INCFSZ 2B,W
0408:  GOTO   40C
0409:  INCFSZ 2C,W
040A:  GOTO   40C
040B:  GOTO   42D
....................     { 
....................     direccion=1; 
040C:  MOVLW  01
040D:  MOVWF  21
....................     contador1=1; 
040E:  MOVWF  2A
....................     for (contador1=1;contador1<=50;contador1++) 
040F:  MOVWF  2A
0410:  MOVF   2A,W
0411:  SUBLW  32
0412:  BTFSS  03.0
0413:  GOTO   429
....................     { 
....................     dato=read_eeprom(direccion);  
0414:  MOVF   21,W
0415:  BSF    03.6
0416:  MOVWF  0D
0417:  BSF    03.5
0418:  BCF    0C.7
0419:  BSF    0C.0
041A:  BCF    03.5
041B:  MOVF   0C,W
041C:  BCF    03.6
041D:  MOVWF  29
....................     output_b(dato); 
041E:  BSF    03.5
041F:  CLRF   06
0420:  BCF    03.5
0421:  MOVF   29,W
0422:  MOVWF  06
....................     delay_ms(1); 
0423:  MOVLW  01
0424:  MOVWF  3B
0425:  CALL   048
....................     direccion++; 
0426:  INCF   21,F
....................     } 
0427:  INCF   2A,F
0428:  GOTO   410
....................      
....................     } 
0429:  INCF   2B,F
042A:  BTFSC  03.2
042B:  INCF   2C,F
042C:  GOTO   407
....................        lcd_gotoxy(1,1); 
042D:  MOVLW  01
042E:  MOVWF  3B
042F:  MOVWF  3C
0430:  CALL   0DF
....................       lcd_putc('\f'); 
0431:  MOVLW  0C
0432:  MOVWF  3A
0433:  CALL   0F1
....................       lcd_gotoxy(1,1); 
0434:  MOVLW  01
0435:  MOVWF  3B
0436:  MOVWF  3C
0437:  CALL   0DF
....................       lcd_putc("Finish"); 
0438:  MOVLW  13
0439:  BSF    03.6
043A:  MOVWF  0D
043B:  MOVLW  00
043C:  MOVWF  0F
043D:  BCF    03.6
043E:  CALL   11E
....................       delay_ms(500); 
043F:  MOVLW  02
0440:  MOVWF  2D
0441:  MOVLW  FA
0442:  MOVWF  3B
0443:  CALL   048
0444:  DECFSZ 2D,F
0445:  GOTO   441
....................       lcd_gotoxy(1,1); 
0446:  MOVLW  01
0447:  MOVWF  3B
0448:  MOVWF  3C
0449:  CALL   0DF
....................       lcd_putc('\f'); 
044A:  MOVLW  0C
044B:  MOVWF  3A
044C:  CALL   0F1
....................       lcd_gotoxy(1,1); 
044D:  MOVLW  01
044E:  MOVWF  3B
044F:  MOVWF  3C
0450:  CALL   0DF
....................       lcd_putc("      Ready     "); 
0451:  MOVLW  17
0452:  BSF    03.6
0453:  MOVWF  0D
0454:  MOVLW  00
0455:  MOVWF  0F
0456:  BCF    03.6
0457:  CALL   11E
....................  
....................        
....................    } 
0458:  BCF    0A.3
0459:  BCF    0A.4
045A:  GOTO   571 (RETURN)
....................  
....................  
.................... void main() 
.................... { 
*
0047:  DATA 00,00
*
045B:  CLRF   04
045C:  BCF    03.7
045D:  MOVLW  1F
045E:  ANDWF  03,F
045F:  MOVLW  19
0460:  BSF    03.5
0461:  MOVWF  19
0462:  MOVLW  A6
0463:  MOVWF  18
0464:  MOVLW  90
0465:  BCF    03.5
0466:  MOVWF  18
0467:  BSF    20.3
0468:  MOVF   20,W
0469:  BSF    03.5
046A:  MOVWF  07
046B:  BCF    03.5
046C:  BSF    20.4
046D:  MOVF   20,W
046E:  BSF    03.5
046F:  MOVWF  07
0470:  MOVLW  08
0471:  MOVWF  13
0472:  MOVLW  36
0473:  BCF    03.5
0474:  MOVWF  14
0475:  BSF    03.5
0476:  BSF    11.0
0477:  BCF    03.5
0478:  CLRF   21
0479:  CLRF   22
047A:  CLRF   23
047B:  BSF    03.5
047C:  BSF    1F.0
047D:  BSF    1F.1
047E:  BSF    1F.2
047F:  BCF    1F.3
0480:  MOVLW  07
0481:  MOVWF  1C
....................  
....................    setup_adc_ports(NO_ANALOGS); 
*
0485:  BSF    03.5
0486:  BSF    1F.0
0487:  BSF    1F.1
0488:  BSF    1F.2
0489:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_2); 
048A:  BCF    1F.6
048B:  BCF    03.5
048C:  BCF    1F.6
048D:  BCF    1F.7
048E:  BSF    03.5
048F:  BCF    1F.7
0490:  BCF    03.5
0491:  BSF    1F.0
....................    setup_psp(PSP_DISABLED); 
0492:  BSF    03.5
0493:  BCF    09.4
....................    setup_spi(SPI_SS_DISABLED); 
0494:  BCF    03.5
0495:  BCF    14.5
0496:  BCF    20.5
0497:  MOVF   20,W
0498:  BSF    03.5
0499:  MOVWF  07
049A:  BCF    03.5
049B:  BSF    20.4
049C:  MOVF   20,W
049D:  BSF    03.5
049E:  MOVWF  07
049F:  BCF    03.5
04A0:  BCF    20.3
04A1:  MOVF   20,W
04A2:  BSF    03.5
04A3:  MOVWF  07
04A4:  MOVLW  01
04A5:  BCF    03.5
04A6:  MOVWF  14
04A7:  MOVLW  00
04A8:  BSF    03.5
04A9:  MOVWF  14
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1); 
04AA:  MOVF   01,W
04AB:  ANDLW  C7
04AC:  IORLW  08
04AD:  MOVWF  01
....................    setup_timer_1(T1_DISABLED); 
04AE:  BCF    03.5
04AF:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
04B0:  MOVLW  00
04B1:  MOVWF  78
04B2:  MOVWF  12
04B3:  MOVLW  00
04B4:  BSF    03.5
04B5:  MOVWF  12
....................    setup_comparator(NC_NC_NC_NC); 
04B6:  MOVLW  07
04B7:  MOVWF  1C
04B8:  MOVF   05,W
04B9:  MOVWF  05
04BA:  MOVLW  03
04BB:  MOVWF  77
04BC:  DECFSZ 77,F
04BD:  GOTO   4BC
04BE:  MOVF   1C,W
04BF:  BCF    03.5
04C0:  BCF    0D.6
....................  
....................    lcd_init(); 
04C1:  GOTO   0AF
....................  
....................    lcd_gotoxy(1,1); 
04C2:  MOVLW  01
04C3:  MOVWF  3B
04C4:  MOVWF  3C
04C5:  CALL   0DF
....................    lcd_putc('\f'); 
04C6:  MOVLW  0C
04C7:  MOVWF  3A
04C8:  CALL   0F1
....................    lcd_gotoxy(1,1); 
04C9:  MOVLW  01
04CA:  MOVWF  3B
04CB:  MOVWF  3C
04CC:  CALL   0DF
....................    lcd_putc("      Ready     "); 
04CD:  MOVLW  20
04CE:  BSF    03.6
04CF:  MOVWF  0D
04D0:  MOVLW  00
04D1:  MOVWF  0F
04D2:  BCF    03.6
04D3:  CALL   11E
....................     
.................... while (true) 
.................... { 
....................     
....................  if(i2c_poll()) 
04D4:  BSF    03.5
04D5:  BTFSS  14.0
04D6:  GOTO   59B
....................  { 
....................     
....................    valor=i2c_read(); 
04D7:  BCF    03.5
04D8:  BCF    14.6
04D9:  BTFSS  0C.3
04DA:  GOTO   4D9
04DB:  MOVF   13,W
04DC:  BSF    14.4
04DD:  MOVWF  28
....................     
....................    if (direccion>=1) 
04DE:  MOVF   21,W
04DF:  SUBLW  00
04E0:  BTFSC  03.0
04E1:  GOTO   599
....................       { 
....................       write_eeprom(direccion,valor); 
04E2:  MOVF   21,W
04E3:  BSF    03.6
04E4:  MOVWF  0D
04E5:  BCF    03.6
04E6:  MOVF   28,W
04E7:  BSF    03.6
04E8:  MOVWF  0C
04E9:  BSF    03.5
04EA:  BCF    0C.7
04EB:  BSF    0C.2
04EC:  BCF    03.5
04ED:  BCF    03.6
04EE:  MOVF   0B,W
04EF:  MOVWF  77
04F0:  BCF    0B.7
04F1:  BSF    03.5
04F2:  BSF    03.6
04F3:  MOVLW  55
04F4:  MOVWF  0D
04F5:  MOVLW  AA
04F6:  MOVWF  0D
04F7:  BSF    0C.1
04F8:  BTFSC  0C.1
04F9:  GOTO   4F8
04FA:  BCF    0C.2
04FB:  MOVF   77,W
04FC:  BCF    03.5
04FD:  BCF    03.6
04FE:  IORWF  0B,F
....................       if (direccion<=50) 
04FF:  MOVF   21,W
0500:  SUBLW  32
0501:  BTFSS  03.0
0502:  GOTO   546
....................       { 
....................       checksum=checksum+valor; 
0503:  MOVF   28,W
0504:  ADDWF  22,F
....................       valor2=valor; 
0505:  CLRF   2E
0506:  MOVF   28,W
0507:  MOVWF  2D
0508:  GOTO   164
0509:  MOVF   7A,W
050A:  MOVWF  27
050B:  MOVF   79,W
050C:  MOVWF  26
050D:  MOVF   78,W
050E:  MOVWF  25
050F:  MOVF   77,W
0510:  MOVWF  24
....................       lcd_gotoxy(1,1); 
0511:  MOVLW  01
0512:  MOVWF  3B
0513:  MOVWF  3C
0514:  CALL   0DF
....................       lcd_putc('\f'); 
0515:  MOVLW  0C
0516:  MOVWF  3A
0517:  CALL   0F1
....................       lcd_gotoxy(1,1); 
0518:  MOVLW  01
0519:  MOVWF  3B
051A:  MOVWF  3C
051B:  CALL   0DF
....................       printf(lcd_putc,"Incoming: %3.0f",valor2); 
051C:  MOVLW  29
051D:  BSF    03.6
051E:  MOVWF  0D
051F:  MOVLW  00
0520:  MOVWF  0F
0521:  BCF    03.0
0522:  MOVLW  0A
0523:  BCF    03.6
0524:  MOVWF  2D
0525:  CALL   183
0526:  MOVLW  02
0527:  MOVWF  04
0528:  MOVF   27,W
0529:  MOVWF  30
052A:  MOVF   26,W
052B:  MOVWF  2F
052C:  MOVF   25,W
052D:  MOVWF  2E
052E:  MOVF   24,W
052F:  MOVWF  2D
0530:  CLRF   31
0531:  GOTO   221
....................       lcd_gotoxy(1,2); 
0532:  MOVLW  01
0533:  MOVWF  3B
0534:  MOVLW  02
0535:  MOVWF  3C
0536:  CALL   0DF
....................       printf(lcd_putc,"Data #  %2d",direccion); 
0537:  MOVLW  31
0538:  BSF    03.6
0539:  MOVWF  0D
053A:  MOVLW  00
053B:  MOVWF  0F
053C:  BCF    03.0
053D:  MOVLW  08
053E:  BCF    03.6
053F:  MOVWF  2D
0540:  CALL   183
0541:  MOVF   21,W
0542:  MOVWF  2D
0543:  MOVLW  11
0544:  MOVWF  2E
0545:  GOTO   38B
....................       } 
....................        
....................       if (direccion==51) 
0546:  MOVF   21,W
0547:  SUBLW  33
0548:  BTFSS  03.2
0549:  GOTO   599
....................       { 
....................       checksumrec=valor; 
054A:  MOVF   28,W
054B:  MOVWF  23
....................        
....................       if (checksumrec==checksum) 
054C:  MOVF   22,W
054D:  SUBWF  23,W
054E:  BTFSS  03.2
054F:  GOTO   572
....................       { 
....................       delay_ms(750); 
0550:  MOVLW  03
0551:  MOVWF  2D
0552:  MOVLW  FA
0553:  MOVWF  3B
0554:  CALL   048
0555:  DECFSZ 2D,F
0556:  GOTO   552
....................       lcd_gotoxy(1,1); 
0557:  MOVLW  01
0558:  MOVWF  3B
0559:  MOVWF  3C
055A:  CALL   0DF
....................       lcd_putc('\f'); 
055B:  MOVLW  0C
055C:  MOVWF  3A
055D:  CALL   0F1
....................       lcd_gotoxy(1,1); 
055E:  MOVLW  01
055F:  MOVWF  3B
0560:  MOVWF  3C
0561:  CALL   0DF
....................       lcd_putc("Reception: OK!"); 
0562:  MOVLW  37
0563:  BSF    03.6
0564:  MOVWF  0D
0565:  MOVLW  00
0566:  MOVWF  0F
0567:  BCF    03.6
0568:  CALL   11E
....................       delay_ms(750); 
0569:  MOVLW  03
056A:  MOVWF  2D
056B:  MOVLW  FA
056C:  MOVWF  3B
056D:  CALL   048
056E:  DECFSZ 2D,F
056F:  GOTO   56B
....................       muestra_datos(); 
0570:  GOTO   3F2
....................       } 
....................        
....................       else if (checksumrec!=checksum) 
0571:  GOTO   596
0572:  MOVF   22,W
0573:  SUBWF  23,W
0574:  BTFSC  03.2
0575:  GOTO   596
....................       { 
....................       delay_ms(750); 
0576:  MOVLW  03
0577:  MOVWF  2D
0578:  MOVLW  FA
0579:  MOVWF  3B
057A:  CALL   048
057B:  DECFSZ 2D,F
057C:  GOTO   578
....................       lcd_gotoxy(1,1); 
057D:  MOVLW  01
057E:  MOVWF  3B
057F:  MOVWF  3C
0580:  CALL   0DF
....................       lcd_putc('\f'); 
0581:  MOVLW  0C
0582:  MOVWF  3A
0583:  CALL   0F1
....................       lcd_gotoxy(1,1); 
0584:  MOVLW  01
0585:  MOVWF  3B
0586:  MOVWF  3C
0587:  CALL   0DF
....................       lcd_putc("Reception:WRONG!"); 
0588:  MOVLW  3F
0589:  BSF    03.6
058A:  MOVWF  0D
058B:  MOVLW  00
058C:  MOVWF  0F
058D:  BCF    03.6
058E:  CALL   11E
....................       delay_ms(750); 
058F:  MOVLW  03
0590:  MOVWF  2D
0591:  MOVLW  FA
0592:  MOVWF  3B
0593:  CALL   048
0594:  DECFSZ 2D,F
0595:  GOTO   591
....................       } 
....................       checksum=0; 
0596:  CLRF   22
....................       direccion=-1; 
0597:  MOVLW  FF
0598:  MOVWF  21
....................       } 
....................        
....................       } 
....................    direccion++; 
0599:  INCF   21,F
059A:  BSF    03.5
....................        
....................   } 
.................... }   
059B:  GOTO   4D5
....................  
.................... } 
059C:  SLEEP

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
